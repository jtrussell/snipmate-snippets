# Misc
snippet strict
	'use strict'
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function (${3:/*arg*/}) {
	  ${4:/*code*/}
	}
# Function
snippet fun
	function ${1:function_name} (${2:/*args*/}) {
	  ${3:/*code*/}
	}
# Closure
snippet fc
	(function (${2:that}) {
	  ${3:/*code*/}
	}(${1:this}))
# Anonymous Function
snippet f
	function (${1:/*args*/}) {
	  ${2:/*code*/}
	}
# Lambda
snippet ()
	(${1:/*params*/}) => {
		${2:/*code*/}
	}
# if
snippet if
	if (${1:/*condition*/}) {
	  ${2:/*code*/}
	}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet t
	${1:/*condition*/} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/*expression*/}) {
	  case '${3:case}':
	    ${4:/*code*/}
	    break
	  default:
	    ${2:/*code*/}
	}
# case
snippet case
	case '${1:case}':
	  ${2:/*code*/}
	  break
# for (...) {...} (Optimised for For-Loop)
snippet for
	for (${1:i} = ${2:/*iterable*/}.length; $1--;) {
	  ${3:/*code*/}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forf
	for (${1:i} = 0; $1 < ${2:/*count*/}; $1++) {
	  ${3:/*code*/}
	}
# while (...) {...}
snippet wh
	while (${1:/*condition*/}) {
	  ${2:/*code*/}
	}
# do...while
snippet do
	do {
	  ${2:/*code*/}
	} while (${1:/*condition*/})
# Object Method
snippet :f
	${1:method_name}: function (${2:attribute}) {
	  ${4:/*code*/}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(() => {
	  ${2: /*code*/}
	}, ${1:/*wait*/})
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')
# jQuery Select
snippet jq
	jQuery('${1:selector}')
snippet log
	console.log(${1:'Hello World'})
snippet dir
	console.dir(${1:obj}, ${2:false}, ${3:2})
snippet req
	require('${1}')
# Jasmine/Mocha
snippet it
	it('should ${1:...}', () => {
	  ${2:/*code*/}
	})
snippet describe
	describe('${1:Thing}', () => {
	  ${2:/*code*/}
	})
